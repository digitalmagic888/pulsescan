"use strict";(self.webpackChunkblockscout_frontend=self.webpackChunkblockscout_frontend||[]).push([[663],{76663:(e,a,t)=>{t.d(a,{offchainLookup:()=>g,offchainLookupSignature:()=>y});var r=t(5291),s=t(61344),n=t(69977),o=t(53678);class c extends n.G{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:s,urls:n}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",n&&["  Gateway URL(s):",...n.map((e=>`    ${(0,o.Gr)(e)}`))],`  Sender: ${s}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class d extends n.G{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,o.Gr)(a)}`,`Response: ${(0,s.P)(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class l extends n.G{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}var u=t(88822),i=t(11856),f=t(62546),b=t(92960),h=t(97451);var p=t(9040),w=t(25493);const y="0x556f1830",m={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function g(e,{blockNumber:a,blockTag:t,data:n,to:o}){const{args:y}=(0,i.p)({data:n,abi:[m]}),[g,k,O,x,G]=y;try{if(!function(e,a){if(!(0,h.U)(e))throw new b.b({address:e});if(!(0,h.U)(a))throw new b.b({address:a});return e.toLowerCase()===a.toLowerCase()}(o,g))throw new l({sender:g,to:o});const n=await async function({data:e,sender:a,urls:t}){let r=new Error("An unknown error occurred.");for(let o=0;o<t.length;o++){const c=t[o],l=c.includes("{sender}")||c.includes("{data}")?"GET":"POST",i="POST"===l?{data:e,sender:a}:void 0;try{const t=await fetch(c.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(i),method:l});let n;if(n=t.headers.get("Content-Type")?.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){r=new u.Gg({body:i,details:(0,s.P)(n.error)||t.statusText,headers:t.headers,status:t.status,url:c});continue}if(!(0,w.v)(n)){r=new d({result:n,url:c});continue}return n}catch(n){r=new u.Gg({body:i,details:n.message,url:c})}}throw r}({data:O,sender:g,urls:k}),{data:c}=await(0,r.R)(e,{blockNumber:a,blockTag:t,data:(0,p.zo)([x,(0,f.E)([{type:"bytes"},{type:"bytes"}],[n,G])]),to:o});return c}catch(L){throw new c({callbackSelector:x,cause:L,data:n,extraData:G,sender:g,urls:k})}}}}]);
//# sourceMappingURL=663.0b3885b0.chunk.js.map